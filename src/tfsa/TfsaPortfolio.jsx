import { useEffect, useMemo, useState } from "react";
import {
  PieChart, Pie, Cell, ResponsiveContainer,
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend
} from "recharts";
import "./TfsaPortfolio.css";

// JSON generated by your script / GitHub Action and placed in public/data/
// Works in dev ("/") and on GitHub Pages ("/PersonalWebsite/").
const DATA_URL = `${import.meta.env.BASE_URL}data/tfsa_portfolio.json`;

export default function TfsaPortfolio() {
  const [rows, setRows] = useState([]);        // [{symbol, shares, price, value}]
  const [timestamp, setTimestamp] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  async function load() {
    setLoading(true);
    setError("");
    try {
      const res = await fetch(DATA_URL, { cache: "no-store" });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const json = await res.json();
      // Expecting: { timestamp, holdings: [{symbol, shares, price, value}], total_value }
      setRows(json.holdings || []);
      setTimestamp(json.timestamp || "");
    } catch (e) {
      setError(`Failed to load portfolio JSON: ${e.message}`);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { load(); }, []);

  const total = useMemo(
    () => rows.reduce((s, r) => s + (Number(r.value) || 0), 0),
    [rows]
  );

  // Simple 6-point faux history so the chart isn’t empty (replace later with real series if desired)
  const history = useMemo(() => {
    const now = new Date();
    return Array.from({ length: 6 }).map((_, i) => {
      const d = new Date(now);
      d.setMonth(d.getMonth() - (5 - i));
      return {
        date: d.toISOString().slice(0, 7),
        total: total * (0.92 + 0.16 * (i / 5)), // gentle upward slope
      };
    });
  }, [total]);

  const COLORS = ["#3b82f6", "#10b981", "#f59e0b", "#ef4444", "#8b5cf6", "#14b8a6", "#0ea5e9"];

  return (
    <div className="pf-wrap">
      <h1>My TFSA Portfolio</h1>
      <p className="pf-sub">
        Data loaded from <code>public/data/tfsa_portfolio.json</code>. Update it with your Python
        script or a GitHub Action.
      </p>

      {error && <div className="pf-alert">{error}</div>}

      <div style={{ display: "flex", gap: 8, alignItems: "center", margin: "8px 0" }}>
        <button
          onClick={load}
          disabled={loading}
          style={{ padding: "6px 10px", border: "1px solid #ddd", borderRadius: 8, background: "#fff", cursor: "pointer" }}
        >
          {loading ? "Refreshing…" : "Refresh"}
        </button>
        <span style={{ opacity: 0.7, fontSize: 13 }}>
          {timestamp ? `Last updated: ${timestamp}` : "—"}
        </span>
      </div>

      {/* Summary cards */}
      <section className="pf-summary">
        <div className="pf-card">
          <div className="pf-card-label">Total Value (CAD)</div>
          <div className="pf-card-value">
            ${total.toLocaleString(undefined, { maximumFractionDigits: 2 })}
          </div>
        </div>
        <div className="pf-card">
          <div className="pf-card-label">Holdings</div>
          <div className="pf-card-value">{rows.length}</div>
        </div>
        <div className="pf-card">
          <div className="pf-card-label">Status</div>
          <div className="pf-card-value">{loading ? "Loading…" : "Ready"}</div>
        </div>
      </section>

      {/* Allocation pie */}
      <div className="pf-chart-section">
        <h2>Current Allocation</h2>
        <ResponsiveContainer width="100%" height={360}>
          <PieChart>
            <Pie
              data={rows}
              dataKey="value"
              nameKey="symbol"
              cx="50%"
              cy="50%"
              outerRadius={110}
              label={({ symbol, value }) => `${symbol}: $${Number(value || 0).toFixed(0)}`}
            >
              {rows.map((_, i) => (
                <Cell key={i} fill={COLORS[i % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip formatter={(v) => `$${Number(v).toLocaleString()}`} />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      </div>

      {/* Growth line (placeholder) */}
      <div className="pf-chart-section">
        <h2>Portfolio Growth (placeholder)</h2>
        <ResponsiveContainer width="100%" height={360}>
          <LineChart data={history}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="date" />
            <YAxis tickFormatter={(v) => `$${(v / 1000).toFixed(1)}k`} />
            <Tooltip formatter={(v) => `$${Number(v).toLocaleString()}`} />
            <Legend />
            <Line type="monotone" dataKey="total" stroke="#3b82f6" strokeWidth={2} dot={false} />
          </LineChart>
        </ResponsiveContainer>
      </div>

      {/* Positions table */}
      <div className="pf-chart-section" style={{ overflowX: "auto" }}>
        <h2>Positions</h2>
        <table className="pf-table" style={{ width: "100%" }}>
          <thead>
            <tr>
              <th>Symbol</th>
              <th className="pf-num">Shares</th>
              <th className="pf-num">Price (CAD)</th>
              <th className="pf-num">Value (CAD)</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((r) => (
              <tr key={r.symbol}>
                <td>{r.symbol}</td>
                <td className="pf-num">
                  {Number(r.shares ?? 0).toLocaleString(undefined, { maximumFractionDigits: 4 })}
                </td>
                <td className="pf-num">
                  {r.price == null ? "—" : `$${Number(r.price).toLocaleString(undefined, { maximumFractionDigits: 2 })}`}
                </td>
                <td className="pf-num">
                  {`$${Number(r.value ?? 0).toLocaleString(undefined, { maximumFractionDigits: 2 })}`}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

